rServeKernelApp {
	akka {
	    loggers = ["akka.event.slf4j.Slf4jLogger"]
	    loglevel = "DEBUG"
	  	 actor {
		   provider = "akka.remote.RemoteActorRefProvider"
			deployment {
		     /user {
		       remote = "akka.tcp://rServeActorSystem@127.0.0.1:2553"
		     }
		   }
		 }
		 remote {
		   enabled-transports = ["akka.remote.netty.tcp"]
		   netty.tcp {
		     hostname = "127.0.0.1"
		     port = 2553
		   }

			 # Settings for the failure detector to monitor connections.
			 # For TCP it is not important to have fast failure detection, since
			 # most connection failures are captured by TCP itself.
			 transport-failure-detector {

				 # FQCN of the failure detector implementation.
				 # It must implement akka.remote.FailureDetector and have
				 # a public constructor with a com.typesafe.config.Config and
				 # akka.actor.EventStream parameter.
				 #implementation-class = "akka.remote.DeadlineFailureDetector"

				 # How often keep-alive heartbeat messages should be sent to each connection.
				 heartbeat-interval = 10 s

				 # Number of potentially lost/delayed heartbeats that will be
				 # accepted before considering it to be an anomaly.
				 # A margin to the `heartbeat-interval` is important to be able to survive sudden,
				 # occasional, pauses in heartbeat arrivals, due to for example garbage collect or
				 # network drop.
				 acceptable-heartbeat-pause = 20 s
			 }



			 # Settings for the Phi accrual failure detector (http://ddg.jaist.ac.jp/pub/HDY+04.pdf
			 # [Hayashibara et al]) used for remote death watch.
			 watch-failure-detector {

				 # FQCN of the failure detector implementation.
				 # It must implement akka.remote.FailureDetector and have
				 # a public constructor with a com.typesafe.config.Config and
				 # akka.actor.EventStream parameter.
				 # implementation-class = "akka.remote.PhiAccrualFailureDetector"

				 # How often keep-alive heartbeat messages should be sent to each connection.
				 heartbeat-interval = 10 s

				 # Defines the failure detector threshold.
				 # A low threshold is prone to generate many wrong suspicions but ensures
				 # a quick detection in the event of a real crash. Conversely, a high
				 # threshold generates fewer mistakes but needs more time to detect
				 # actual crashes.
				 #threshold = 10.0

				 # Number of the samples of inter-heartbeat arrival times to adaptively
				 # calculate the failure timeout for connections.
				 #max-sample-size = 200

				 # Minimum standard deviation to use for the normal distribution in
				 # AccrualFailureDetector. Too low standard deviation might result in
				 # too much sensitivity for sudden, but normal, deviations in heartbeat
				 # inter arrival times.
				 min-std-deviation = 200 ms

				 # Number of potentially lost/delayed heartbeats that will be
				 # accepted before considering it to be an anomaly.
				 # This margin is important to be able to survive sudden, occasional,
				 # pauses in heartbeat arrivals, due to for example garbage collect or
				 # network drop.
				 acceptable-heartbeat-pause = 30 s


			 }
		}
      rServe {
        numActors = 4
      }

	}
}

clientApp {
	akka {
	  	 actor {
		   provider = "akka.remote.RemoteActorRefProvider"
			deployment {
		     /local {
		       remote = "akka.tcp://rServeActorSystem@127.0.0.1:2552"
		     }
		   }
		 }
		 remote {
		   enabled-transports = ["akka.remote.netty.tcp"]
		   netty.tcp {
		     hostname = "127.0.0.1"
		     port = 2552
		   }
		}
	}
}